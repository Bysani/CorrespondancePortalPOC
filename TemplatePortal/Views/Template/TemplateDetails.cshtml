@using EfDBContext;
@model Template

@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <link href="~/css/Template.css" rel="stylesheet" />
    <script type="text/javascript">


        function saveTemplateDetails() {
            $("#success-alert").hide();
            const editorData = myEditor.getData();
            var template = new Object();
            template.Id = $("#txtId").val();
            template.name = $("#txtName").val();
            template.createdDate = $("#txtDate").val();
            template.statusId = $("#txtStatusId").val();
            template.body = editorData;
            $.ajax({
                type: 'POST',
                url: '/Template/SaveTemplate',
                data: template,
                success: function (result) {
                    $("#success-alert").show();
                    setTimeout(function () { $("#success-alert").hide(); }, 2000);
                },
                error: function () {
                    alert('Failed to receive the Data');
                    console.log('Failed ');
                }
            })
        }

        function emailTemplateDetails() {
            $("#success-email-alert").hide();
            const editorData = myEditor.getData();
            var template = new Object();
            template.Id = $("#txtId").val();
            template.name = $("#txtName").val();
            template.createdDate = $("#txtDate").val();
            template.statusId = $("#txtStatusId").val();
            template.body = editorData;
            $.ajax({
                type: 'POST',
                url: '/Template/SendTemplate?barCodeSelection=' + $("#txtPreference").val(),
                data: template,
                success: function (result) {
                    $("#success-email-alert").show();
                    setTimeout(function () { $("#success-email-alert").hide(); }, 2000);
                },
                error: function () {
                    alert('Failed to receive the Data');
                    console.log('Failed ');
                }
            })
        }

        $('#selPreference').on('change', function () {
            var preference = $(this).val();
            $("#txtPreference").val(preference);
           
        });

        $('#previewButton').click(function () {
            var contents = myEditor.getData();
            var mywin = window.open("", "ckeditor_preview", "location=0,status=0,scrollbars=0,width=500,height=500");

            $(mywin.document.body).html(contents);
        });


        $("#btnAddDummyText").click(function () {

            const model = myEditor.model;

            model.change(writer => {
                const currentAttributes = model.document.selection.getAttributes();

                model.insertContent(writer.createText('[Foo]', currentAttributes));
            });
        })

        function addPlaceHolder(placeHolder) {
            const model = myEditor.model;

            model.change(writer => {
                const currentAttributes = model.document.selection.getAttributes();

                model.insertContent(writer.createText('#' + placeHolder + '#', currentAttributes));
            });
        }


        function saveTemplateFields() {

            var templateFields = new Object();
            templateFields.templateId = $("#txtId").val();
            templateFields.title = $("#txtTitle").val();
            templateFields.dataType = document.getElementById("selDataType").value;

            $.ajax({
                type: 'POST',
                url: '/Template/SaveTemplateFields',
                data: templateFields,
                success: function (result) {
                    $("#success-alert-field").show();
                    setTimeout(function () { $("#success-alert-field").hide(); }, 2000);
                },
                error: function () {
                    alert('Failed to receive the Data');
                    console.log('Failed ');
                }
            })
        }

        $("#btnDelete").click(function () {
            var templateFields = new Object();
            templateFields.templateId = $("#txtId").val();
            templateFields.title = $("#txtTitle").val();
            templateFields.dataType = document.getElementById("selDataType").value;

            $.ajax({
                type: 'POST',
                url: '/Template/DeleteTemplate',
                data: templateFields,
                success: function (result) {
                    alert('Successfully deleted data ');
                    window.location.href = "@Url.Action("TemplateList", "Template")";
                },
                error: function () {
                    alert('Failed to receive the Data');
                    console.log('Failed ');
                }
            })
        })

        $("#btnModelClose").click(function () {
            $("#divPreferences").modal('hide');
        })
    </script>
</head>
<body>

    <div>

        <div class="alert alert-success" id="success-alert" style="display:none"> Template Saved Successfully</div>
        <div class="alert alert-success" id="success-email-alert" style="display:none"> Template Sent Successfully</div>
        <div class="alert alert-success" id="success-alert-field" style="display:none"> Variable created Successfully</div>
        <div class="form-inline">
            <div class="form-group">
                <div class="col-sm-9">


                    <div id="editor" title="Compose Message" style="height:500px !important;width:600px !important">
                        @Html.Raw(Model.Body)
                    </div>
                    <input type="text" id="txtName" value="@Model.Name" style="display:none;" />
                    <input type="text" id="txtDate" value="@Model.CreatedDate" style="display:none;" />
                    <input type="text" id="txtId" value="@Model.Id" style="display:none;" />
                    <input type="text" id="txtStatusId" value="@Model.StatusId" style="display:none;" />
                    <input type="text" id="txtPreference" value="" style="display:none;" />

                </div>
                <div class="col-sm-3">

                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">APPLICABLE CHANNELS</legend>

                        <p class="submit">
                            <button type="button" id="btnEmailChannel" value="Email" style="width:200px;"> <input type="checkbox" checked="checked" /> Email </button>
                        </p>
                        <p class="submit">
                            <button type="button" id="btnSMSChannel" value="Email" style="width:200px;"> <input type="checkbox" /> SMS </button>
                        </p>
                    </fieldset>


                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">
                            Select Variables
                        </legend>
                        <table id="tblFields" class="container table table-bordered table-responsive table-hover">
                            <thead>
                                <tr>
                                    <td>Add  Field</td>
                                    <td>Mandatory</td>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (TemplateFields fields in Model.templateFields)
                                {
                                    <tr>

                                        <td>
                                            <button id="btnTemplateDetails" onclick="addPlaceHolder('@fields.Title')">
                                                @if (fields.IsSelected == true)
                                                {
                                                    <img src="~/Images/greentickmark.png" style="width:15px;height:20px;" />
                                                }
                                                else
                                                {
                                                    <img src="~/Images/plusimage.png" style="width:15px;height:20px;" />
                                                }

                                                @fields.Title
                                            </button>
                                        </td>
                                        <td><input id="@fields.Id" type="checkbox" name="Fruit" value="@fields.IsMandatory" checked="@fields.IsMandatory" /> </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <p class="submit">
                            <input type="submit" id="btnDefinition" onclick="saveTemplateFields()" value="Create New Variable" />
                            <br />
                        <p>
                            <label>Title</label>
                            <input type="text" id="txtTitle" />
                        </p>
                        <p>
                            <label>Data Type</label>
                            <select id="selDataType">
                                <option id="Date" value="Date">
                                    Date
                                </option>
                                <option id="String" value="String">
                                    String
                                </option>
                                <option id="Boolean" value="Boolean">
                                    Boolean
                                </option>
                                <option id="BigInt" value="BigInt">
                                    BigInt
                                </option>
                            </select>
                        </p>
                    </fieldset>
                </div>
            </div>


            <script>
                var myEditor;
                // This sample still does not showcase all CKEditor 5 features (!)
                // Visit https://ckeditor.com/docs/ckeditor5/latest/features/index.html to browse all the features.
                CKEDITOR.ClassicEditor.create(document.getElementById("editor"), {
                    // https://ckeditor.com/docs/ckeditor5/latest/features/toolbar/toolbar.html#extended-toolbar-configuration-format

                    toolbar: {
                        items: [
                            'findAndReplace', 'selectAll', '|',
                            'heading', '|',
                            'bold', 'italic', 'strikethrough', 'underline', 'code', 'subscript', 'superscript', 'removeFormat', '|',
                            'bulletedList', 'numberedList', 'todoList', '|',
                            'outdent', 'indent', '|',
                            'undo', 'redo',
                            '-',
                            'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor', 'highlight', '|',
                            'alignment', '|',
                            'link', 'insertImage', 'blockQuote', 'insertTable', 'mediaEmbed', 'codeBlock', 'htmlEmbed', '|',
                            'specialCharacters', 'horizontalLine', 'pageBreak', '|',
                            'textPartLanguage', '|',
                            'sourceEditing'
                        ],
                        shouldNotGroupWhenFull: true
                    },
                    // Changing the language of the interface requires loading the language file using the <script> tag.
                    // language: 'es',
                    list: {
                        properties: {
                            styles: true,
                            startIndex: true,
                            reversed: true
                        }
                    },
                    // https://ckeditor.com/docs/ckeditor5/latest/features/headings.html#configuration
                    heading: {
                        options: [
                            { model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },
                            { model: 'heading1', view: 'h1', title: 'Heading 1', class: 'ck-heading_heading1' },
                            { model: 'heading2', view: 'h2', title: 'Heading 2', class: 'ck-heading_heading2' },
                            { model: 'heading3', view: 'h3', title: 'Heading 3', class: 'ck-heading_heading3' },
                            { model: 'heading4', view: 'h4', title: 'Heading 4', class: 'ck-heading_heading4' },
                            { model: 'heading5', view: 'h5', title: 'Heading 5', class: 'ck-heading_heading5' },
                            { model: 'heading6', view: 'h6', title: 'Heading 6', class: 'ck-heading_heading6' }
                        ]
                    },
                    // https://ckeditor.com/docs/ckeditor5/latest/features/editor-placeholder.html#using-the-editor-configuration
                    placeholder: 'Welcome to CKEditor 5!',
                    // https://ckeditor.com/docs/ckeditor5/latest/features/font.html#configuring-the-font-family-feature
                    fontFamily: {
                        options: [
                            'default',
                            'Arial, Helvetica, sans-serif',
                            'Courier New, Courier, monospace',
                            'Georgia, serif',
                            'Lucida Sans Unicode, Lucida Grande, sans-serif',
                            'Tahoma, Geneva, sans-serif',
                            'Times New Roman, Times, serif',
                            'Trebuchet MS, Helvetica, sans-serif',
                            'Verdana, Geneva, sans-serif'
                        ],
                        supportAllValues: true
                    },
                    // https://ckeditor.com/docs/ckeditor5/latest/features/font.html#configuring-the-font-size-feature
                    fontSize: {
                        options: [10, 12, 14, 'default', 18, 20, 22],
                        supportAllValues: true
                    },
                    // Be careful with the setting below. It instructs CKEditor to accept ALL HTML markup.
                    // https://ckeditor.com/docs/ckeditor5/latest/features/general-html-support.html#enabling-all-html-features
                    htmlSupport: {
                        allow: [
                            {
                                name: /.*/,
                                attributes: true,
                                classes: true,
                                styles: true
                            }
                        ]
                    },
                    // Be careful with enabling previews
                    // https://ckeditor.com/docs/ckeditor5/latest/features/html-embed.html#content-previews
                    htmlEmbed: {
                        showPreviews: true
                    },
                    // https://ckeditor.com/docs/ckeditor5/latest/features/link.html#custom-link-attributes-decorators
                    link: {
                        decorators: {
                            addTargetToExternalLinks: true,
                            defaultProtocol: 'https://',
                            toggleDownloadable: {
                                mode: 'manual',
                                label: 'Downloadable',
                                attributes: {
                                    download: 'file'
                                }
                            }
                        }
                    },
                    // https://ckeditor.com/docs/ckeditor5/latest/features/mentions.html#configuration

                    // The "super-build" contains more premium features that require additional configuration, disable them below.
                    // Do not turn them on unless you read the documentation and know how to configure them and setup the editor.
                    removePlugins: [
                        'RealTimeCollaborativeComments',
                        'RealTimeCollaborativeTrackChanges',
                        'RealTimeCollaborativeRevisionHistory',
                        'PresenceList',
                        'Comments',
                        'TrackChanges',
                        'TrackChangesData',
                        'RevisionHistory',
                        'Pagination',
                        'WProofreader'

                    ]
                }).then(editor => {
                    console.log('Editor was initialized', editor);
                    myEditor = editor;
                    //editor.editing.view.document.on('change:isFocused', (evt, data, isFocused) => {
                    //    const selection = evt.source.selection;
                    //    if (selection) {
                    //        var selectedElement = selection.getSelectedElement();
                    //        if (selectedElement != null && selectedElement.name === "figure") {
                    //            var imageAttributes = selectedElement._children[0]._attrs;
                    //            imageAttributes.forEach(item => {
                    //                if (item && item == "imgDummyBarCode") {
                    //                    //$("#divPreferences").dialog("open");
                    //                    // $("#divPreferences").show();
                    //                    $("#divPreferences").modal();
                    //                }

                    //            })
                    //        }

                    //    }
                    //});

                    editor.editing.view.document.on('click', (evt, data) => {
                        $("#divPreferences").modal('hide');
                        const selection = evt.source.selection;
                        if (selection) {
                            var selectedElement = selection.getSelectedElement();
                            if (selectedElement != null && selectedElement.name === "figure") {
                                var imageAttributes = selectedElement._children[0]._attrs;
                                imageAttributes.forEach(item => {
                                    if (item && item == "imgDummyBarCode") {
                                        //$("#divPreferences").dialog("open");
                                        // $("#divPreferences").show();
                                        $("#divPreferences").modal();
                                    }

                                })
                            }


                        }
                    });
                })
                    .catch(err => {
                        console.error(err.stack);
                    });;


            </script>
        </div>
    </div>
    <p class="submit">
        <input id="btnTemplateSave" type="submit" onclick="saveTemplateDetails()" value="Save" />

        <input id="btnTemplateSave" type="submit" onclick="emailTemplateDetails()" value="Email" />

        <input id="previewButton" type ="submit" value="Preview">

        <input id="btnDelete" type ="submit" value="Delete" />

        </p>

    <div class="modal fade" id="divPreferences" tabindex="-1" role="dialog" aria-labelledby="divPreferencesTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="divPreferencesTitle">Preference</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" style="height:100px !important">
                    <div class="optionbox">
                        <select id="selPreference">
                            <option>
                                Select
                            </option>
                            <option id="QR Code" value="QR Code">
                                QR Code
                            </option>
                            <option id="UPC A barcode" value="UPC A barcode">
                                UPC A barcode
                            </option>
                            <option id="UPC E barcode" value="UPC E barcode">
                                UPC E barcode
                            </option>
                            <option id="OMR barcode" value="OMR barcode">
                                OMR barcode
                            </option>
                        </select>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" id="btnModelClose">Close</button>
                    </div>
                </div>
        </div>
    </div>

</body>
</html>